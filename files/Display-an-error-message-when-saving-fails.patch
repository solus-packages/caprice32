From 54c7a3d9f072749045ca5f3ca406116de729f7bc Mon Sep 17 00:00:00 2001
From: Colin Pitrat <colin.pitrat@gmail.com>
Date: Wed, 29 Apr 2020 14:08:25 +0100
Subject: [PATCH] Display an error message when saving fails. This addresses an
 issue found in #137

---
 src/cap32.cpp                     |  4 ++--
 src/cap32.h                       |  2 +-
 src/configuration.cpp             |  8 +++++++-
 src/configuration.h               |  2 +-
 src/gui/includes/CapriceOptions.h |  2 +-
 src/gui/src/CapriceOptions.cpp    | 18 +++++++++++++-----
 test/configuration.cpp            | 15 +++++++++++++++
 7 files changed, 40 insertions(+), 11 deletions(-)

diff --git a/src/cap32.cpp b/src/cap32.cpp
index 0866cc36..1e7bdebe 100644
--- a/src/cap32.cpp
+++ b/src/cap32.cpp
@@ -1748,7 +1748,7 @@ void loadConfiguration (t_CPC &CPC, const std::string& configFilename)
 
 
 
-void saveConfiguration (t_CPC &CPC, const std::string& configFilename)
+bool saveConfiguration (t_CPC &CPC, const std::string& configFilename)
 {
    config::Config conf;
 
@@ -1816,7 +1816,7 @@ void saveConfiguration (t_CPC &CPC, const std::string& configFilename)
    }
    conf.setStringValue("rom", "rom_mf2", CPC.rom_mf2);
 
-   conf.saveToFile(configFilename);
+   return conf.saveToFile(configFilename);
 }
 
 
diff --git a/src/cap32.h b/src/cap32.h
index 67fe8bb5..b7a616f6 100644
--- a/src/cap32.h
+++ b/src/cap32.h
@@ -405,7 +405,7 @@ void cleanExit(int returnCode);
 //  - /etc/cap32.cfg
 std::string getConfigurationFilename(bool forWrite = false);
 void loadConfiguration (t_CPC &CPC, const std::string& configFilename);
-void saveConfiguration (t_CPC &CPC, const std::string& configFilename);
+bool saveConfiguration (t_CPC &CPC, const std::string& configFilename);
 
 int cap32_main(int argc, char **argv);
 
diff --git a/src/configuration.cpp b/src/configuration.cpp
index 58e9fddc..7ee8371b 100644
--- a/src/configuration.cpp
+++ b/src/configuration.cpp
@@ -2,6 +2,7 @@
 #include <sstream>
 #include <cstring>
 #include <fstream>
+#include <iostream>
 
 namespace config
 {
@@ -62,11 +63,16 @@ namespace config
     return out;
   }
 
-  void Config::saveToFile(const std::string& configFilename) const
+  bool Config::saveToFile(const std::string& configFilename) const
   {
     std::ofstream configStream(configFilename);
     toStream(configStream);
     configStream.close();
+    bool success = configStream.good();
+    if (!success) {
+      std::cerr << "Couldn't save configuration to '" << configFilename << "'. Is the file writable?" << std::endl;
+    }
+    return success;
   }
 
   bool Config::hasValue(std::string section, std::string key) const
diff --git a/src/configuration.h b/src/configuration.h
index 34fd6908..3885dc18 100644
--- a/src/configuration.h
+++ b/src/configuration.h
@@ -16,7 +16,7 @@ namespace config
       void parseFile(const std::string& configFilename);
 
       std::ostream& toStream(std::ostream& out) const;
-      void saveToFile(const std::string& configFilename) const;
+      bool saveToFile(const std::string& configFilename) const;
 
       bool hasValue(std::string section, std::string key) const;
       int getIntValue(const std::string& section, const std::string& key, const int defaultValue) const;
diff --git a/src/gui/includes/CapriceOptions.h b/src/gui/includes/CapriceOptions.h
index e90ecbd8..30d2a453 100644
--- a/src/gui/includes/CapriceOptions.h
+++ b/src/gui/includes/CapriceOptions.h
@@ -131,7 +131,7 @@ namespace wGui
       t_CPC m_oldCPCsettings;  // we will store the current CPC settings in this variable, and 
                                // when clicking OK in the options screen, check what options have changed
                                // and take a required action (e.g. emulator reset, sound system reset...)
-      void ProcessOptionChanges(t_CPC& CPC, bool saveChanges); // see m_oldCPCsettings
+      bool ProcessOptionChanges(t_CPC& CPC, bool saveChanges); // see m_oldCPCsettings
 
       private:
 
diff --git a/src/gui/src/CapriceOptions.cpp b/src/gui/src/CapriceOptions.cpp
index 5120e791..95c80372 100644
--- a/src/gui/src/CapriceOptions.cpp
+++ b/src/gui/src/CapriceOptions.cpp
@@ -355,9 +355,9 @@ bool CapriceOptions::HandleMessage(CMessage* pMessage)
               CPC.joystick_emulation = (m_pCheckBoxJoystickEmulation->GetCheckBoxState() == CCheckBox::CHECKED)?1:0;
 
               // Check if any reset or re-init is required, e.g. emulator reset, sound system reset...
-              ProcessOptionChanges(CPC, pMessage->Source() == m_pButtonSave);
-
-              CloseFrame();
+              if (ProcessOptionChanges(CPC, pMessage->Source() == m_pButtonSave)) {
+                CloseFrame();
+              }
               bHandled = true;
               break;
             }
@@ -477,7 +477,7 @@ void CapriceOptions::EnableTab(std::string sTabName) {
 
 
 // Reinitialize parts of Caprice32 depending on options that have changed.
-void CapriceOptions::ProcessOptionChanges(t_CPC& CPC, bool saveChanges) {
+bool CapriceOptions::ProcessOptionChanges(t_CPC& CPC, bool saveChanges) {
     // if one of the following options has changed, re-init the CPC emulation :
     //  - CPC Model
     //  - amount of RAM
@@ -562,8 +562,16 @@ void CapriceOptions::ProcessOptionChanges(t_CPC& CPC, bool saveChanges) {
 
     if (saveChanges)
     {
-        saveConfiguration(CPC, getConfigurationFilename(true /* forWrite */));
+        std::string configuration_file = getConfigurationFilename(true /* forWrite */);
+        if (!saveConfiguration(CPC, configuration_file)) {
+          std::string message = "Couldn't save to " + configuration_file;
+          wGui::CMessageBox *pMessageBox = new wGui::CMessageBox(CRect(CPoint(m_ClientRect.Width() /2 - 125, m_ClientRect.Height() /2 - 30), 250, 60), this, nullptr, "Saving configuration failed", message, CMessageBox::BUTTON_OK);
+          pMessageBox->SetModal(true);
+          return false;
+        }
     }
+
+    return true;
 }
 
 } // namespace wGui
diff --git a/test/configuration.cpp b/test/configuration.cpp
index fcba2b68..b1a0b26f 100644
--- a/test/configuration.cpp
+++ b/test/configuration.cpp
@@ -119,6 +119,21 @@ TEST_F(ConfigurationTest, saveToFileAndMore)
   ASSERT_EQ(expectedConfig, buffer.str());
 }
 
+TEST_F(ConfigurationTest, saveToNonWritableFile)
+{
+  // Make a non-writable config file
+  auto configFileName = getTmpFilename(0);
+  ASSERT_EQ(0, chmod(configFileName.c_str(), S_IRUSR|S_IRGRP|S_IROTH));
+  std::string initalConfig = "[system]\nmodel=42\n";
+  configuration_.parseString(initalConfig);
+
+  EXPECT_FALSE(configuration_.saveToFile(getTmpFilename(0)));
+
+  // This works when the file is writable
+  ASSERT_EQ(0, chmod(configFileName.c_str(), S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH));
+  EXPECT_TRUE(configuration_.saveToFile(getTmpFilename(0)));
+}
+
 // TODO(cpitrat): test about every value in conf ?
 TEST_F(ConfigurationTest, loadConfigurationWithValidContent)
 {
